{"ast":null,"code":"import * as Localization from \"expo-localization\";\nimport i18n from \"i18n-js\";\nimport { en, de, fr, sv, ru, pl, pt, da, zh, ms, es } from \"./resources\";\ni18n.fallbacks = true;\ni18n.translations = {\n  en: en,\n  de: de,\n  fr: fr,\n  sv: sv,\n  ru: ru,\n  pl: pl,\n  pt: pt,\n  da: da,\n  zh: zh,\n  ms: ms,\n  es: es\n};\ni18n.locale = Localization.locale;\nexport function t(key, values) {\n  return values ? i18n.t(key, values) : i18n.t(key);\n}","map":{"version":3,"sources":["E:/Work/Web/ReactNative/Test/app/utils/translations/i18n.ts"],"names":["Localization","i18n","en","de","fr","sv","ru","pl","pt","da","zh","ms","es","fallbacks","translations","locale","t","key","values"],"mappings":"AAAA,OAAO,KAAKA,YAAZ,MAA8B,mBAA9B;AACA,OAAOC,IAAP,MAAiB,SAAjB;AAEA,SAASC,EAAT,EAAaC,EAAb,EAAiBC,EAAjB,EAAqBC,EAArB,EAAyBC,EAAzB,EAA6BC,EAA7B,EAAiCC,EAAjC,EAAqCC,EAArC,EAAyCC,EAAzC,EAA6CC,EAA7C,EAAiDC,EAAjD;AAGAX,IAAI,CAACY,SAAL,GAAiB,IAAjB;AACAZ,IAAI,CAACa,YAAL,GAAoB;AAAEZ,EAAAA,EAAE,EAAFA,EAAF;AAAMC,EAAAA,EAAE,EAAFA,EAAN;AAAUC,EAAAA,EAAE,EAAFA,EAAV;AAAcC,EAAAA,EAAE,EAAFA,EAAd;AAAkBC,EAAAA,EAAE,EAAFA,EAAlB;AAAsBC,EAAAA,EAAE,EAAFA,EAAtB;AAA0BC,EAAAA,EAAE,EAAFA,EAA1B;AAA8BC,EAAAA,EAAE,EAAFA,EAA9B;AAAkCC,EAAAA,EAAE,EAAFA,EAAlC;AAAsCC,EAAAA,EAAE,EAAFA,EAAtC;AAA0CC,EAAAA,EAAE,EAAFA;AAA1C,CAApB;AAGAX,IAAI,CAACc,MAAL,GAAcf,YAAY,CAACe,MAA3B;AAQA,OAAO,SAASC,CAAT,CAAWC,GAAX,EAAuCC,MAAvC,EAAkF;AACvF,SAAOA,MAAM,GAAGjB,IAAI,CAACe,CAAL,CAAOC,GAAP,EAAYC,MAAZ,CAAH,GAAyBjB,IAAI,CAACe,CAAL,CAAOC,GAAP,CAAtC;AACD","sourcesContent":["import * as Localization from \"expo-localization\";\r\nimport i18n from \"i18n-js\";\r\n\r\nimport { en, de, fr, sv, ru, pl, pt, da, zh, ms, es, TranslationKeys } from \"./resources\";\r\n\r\n// Configure\r\ni18n.fallbacks = true;\r\ni18n.translations = { en, de, fr, sv, ru, pl, pt, da, zh, ms, es };\r\n\r\n// Test locales quickly by overriding this value\r\ni18n.locale = Localization.locale;\r\n\r\n/*\r\n * Pass a translation key and receive a translated string, optionally passing a template value.\r\n * eg.\r\n * t('act') // Act\r\n * t('monthlyEmissionNumber', { co2: '100kg' }) // Your emissions this month 100kg\r\n **/\r\nexport function t(key: keyof TranslationKeys, values?: { [id: string]: string }): string {\r\n  return values ? i18n.t(key, values) : i18n.t(key);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}