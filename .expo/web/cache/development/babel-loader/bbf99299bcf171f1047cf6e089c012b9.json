{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"E:\\\\Work\\\\Web\\\\ReactNative\\\\Test\\\\app\\\\utils\\\\translations\\\\localization.tsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nvar LocalizationContext = React.createContext({\n  language: \"en\",\n  locale: \"en_GB\",\n  setLanguage: function setLanguage(language) {},\n  setLocale: function setLocale(locale) {}\n});\n\nvar withLocalization = function withLocalization(Component) {\n  var _class, _temp;\n\n  return _temp = _class = function (_React$Component) {\n    _inherits(_class, _React$Component);\n\n    var _super = _createSuper(_class);\n\n    function _class() {\n      _classCallCheck(this, _class);\n\n      return _super.apply(this, arguments);\n    }\n\n    _createClass(_class, [{\n      key: \"render\",\n      value: function render() {\n        var _this = this;\n\n        return React.createElement(LocalizationContext.Consumer, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 9\n          }\n        }, function (_ref) {\n          var language = _ref.language,\n              setLanguage = _ref.setLanguage,\n              locale = _ref.locale,\n              setLocale = _ref.setLocale;\n          return React.createElement(Component, _extends({\n            language: language,\n            setLanguage: setLanguage,\n            locale: locale,\n            setLocale: setLocale\n          }, _this.props, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 13\n            }\n          }));\n        });\n      }\n    }]);\n\n    return _class;\n  }(React.Component), _class.navigationOptions = Component.navigationOptions, _temp;\n};\n\nexport { withLocalization, LocalizationContext };","map":{"version":3,"sources":["E:/Work/Web/ReactNative/Test/app/utils/translations/localization.tsx"],"names":["React","LocalizationContext","createContext","language","locale","setLanguage","setLocale","withLocalization","Component","props","navigationOptions"],"mappings":";;;;;;;;;;;;AAIA,OAAOA,KAAP,MAAkB,OAAlB;AAQA,IAAMC,mBAAmB,GAAGD,KAAK,CAACE,aAAN,CAAoB;AAC9CC,EAAAA,QAAQ,EAAE,IADoC;AAE9CC,EAAAA,MAAM,EAAE,OAFsC;AAI9CC,EAAAA,WAAW,EAAE,qBAACF,QAAD,EAAsB,CAElC,CAN6C;AAQ9CG,EAAAA,SAAS,EAAE,mBAACF,MAAD,EAAoB,CAE9B;AAV6C,CAApB,CAA5B;;AAaA,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAmBC,SAAnB,EAAyD;AAAA;;AAChF;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,aAIE,kBAAS;AAAA;;AACP,eACE,oBAAC,mBAAD,CAAqB,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACG;AAAA,cAAGL,QAAH,QAAGA,QAAH;AAAA,cAAaE,WAAb,QAAaA,WAAb;AAAA,cAA0BD,MAA1B,QAA0BA,MAA1B;AAAA,cAAkCE,SAAlC,QAAkCA,SAAlC;AAAA,iBACC,oBAAC,SAAD;AACE,YAAA,QAAQ,EAAEH,QADZ;AAEE,YAAA,WAAW,EAAEE,WAFf;AAGE,YAAA,MAAM,EAAED,MAHV;AAIE,YAAA,SAAS,EAAEE;AAJb,aAKM,KAAI,CAACG,KALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADD;AAAA,SADH,CADF;AAaD;AAlBH;;AAAA;AAAA,IAAqBT,KAAK,CAACQ,SAA3B,UAESE,iBAFT,GAE6BF,SAAS,CAACE,iBAFvC;AAoBD,CArBD;;AAuBA,SAASH,gBAAT,EAA2BN,mBAA3B","sourcesContent":["/* eslint-disable  @typescript-eslint/explicit-module-boundary-types */\r\n/* eslint-disable  @typescript-eslint/ban-types */\r\n/* eslint-disable  @typescript-eslint/ban-ts-comment */\r\n\r\nimport React from \"react\";\r\n\r\n/* leave optional or ts complains */\r\ninterface LocalizationContextProps {\r\n  language?: string;\r\n  locale?: string;\r\n}\r\n\r\nconst LocalizationContext = React.createContext({\r\n  language: \"en\",\r\n  locale: \"en_GB\",\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  setLanguage: (language: string) => {\r\n    //do nothing.\r\n  },\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  setLocale: (locale: string) => {\r\n    //do nothing.\r\n  },\r\n});\r\n\r\nconst withLocalization = <P extends object>(Component: React.ComponentType<P>) => {\r\n  return class extends React.Component<P> {\r\n    // @ts-ignore\r\n    static navigationOptions = Component.navigationOptions;\r\n\r\n    render() {\r\n      return (\r\n        <LocalizationContext.Consumer>\r\n          {({ language, setLanguage, locale, setLocale }) => (\r\n            <Component\r\n              language={language}\r\n              setLanguage={setLanguage}\r\n              locale={locale}\r\n              setLocale={setLocale}\r\n              {...this.props}\r\n            />\r\n          )}\r\n        </LocalizationContext.Consumer>\r\n      );\r\n    }\r\n  };\r\n};\r\n\r\nexport { withLocalization, LocalizationContext, LocalizationContextProps };\r\n"]},"metadata":{},"sourceType":"module"}