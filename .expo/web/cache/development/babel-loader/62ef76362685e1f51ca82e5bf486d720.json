{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\Work\\\\Web\\\\ReactNative\\\\Test\\\\App.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useEffect, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\nimport * as Font from \"expo-font\";\nimport { Ionicons, MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport { Provider } from \"react-redux\";\nimport { enableScreens } from \"react-native-screens\";\nimport AppNavigator from \"./app/navigation/Navigator/AppNavigator\";\nimport store from \"./app/redux/store\";\nvar supportedLanguages = [\"en\", \"fr\", \"de\", \"sv\", \"da\", \"ru\", \"pt\", \"pl\", \"zh\", \"my\", \"es\"];\nvar defaultLanguage = \"en\";\nvar defaultLocale = \"en-us\";\n\nvar App = function App() {\n  enableScreens();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      ready = _useState2[0],\n      setReady = _useState2[1];\n\n  useEffect(function () {\n    Promise.all([Font.loadAsync(_objectSpread(_objectSpread(_objectSpread({}, Ionicons.font), MaterialCommunityIcons.font), {}, {\n      Poppins: require(\"./assets/fonts/Poppins-Regular.ttf\")\n    }))]).then(function () {\n      setReady(true);\n    }).catch(function (error) {\n      Sentry.captureException(error);\n    });\n  }, []);\n  var body = React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 14\n    }\n  });\n\n  if (ready) {\n    body = React.createElement(Provider, {\n      store: store,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }\n    }, React.createElement(AppNavigator, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }\n    }));\n  }\n\n  return React.createElement(SafeAreaProvider, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, body);\n};\n\nexport default App;","map":{"version":3,"sources":["E:/Work/Web/ReactNative/Test/App.tsx"],"names":["React","useEffect","useState","SafeAreaProvider","Font","Ionicons","MaterialCommunityIcons","Provider","enableScreens","AppNavigator","store","supportedLanguages","defaultLanguage","defaultLocale","App","ready","setReady","Promise","all","loadAsync","font","Poppins","require","then","catch","error","Sentry","captureException","body"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAEA,SAASC,gBAAT,QAAiC,gCAAjC;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AAGA,SAASC,QAAT,EAAmBC,sBAAnB,QAAiD,oBAAjD;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,aAAT,QAA8B,sBAA9B;AAIA,OAAOC,YAAP;AACA,OAAOC,KAAP;AAEA,IAAMC,kBAA4B,GAAG,CACnC,IADmC,EAEnC,IAFmC,EAGnC,IAHmC,EAInC,IAJmC,EAKnC,IALmC,EAMnC,IANmC,EAOnC,IAPmC,EAQnC,IARmC,EASnC,IATmC,EAUnC,IAVmC,EAWnC,IAXmC,CAArC;AAaA,IAAMC,eAAe,GAAG,IAAxB;AACA,IAAMC,aAAa,GAAG,OAAtB;;AAEA,IAAMC,GAAa,GAAG,SAAhBA,GAAgB,GAAM;AAC1BN,EAAAA,aAAa;;AAMb,kBAA0BN,QAAQ,CAAC,KAAD,CAAlC;AAAA;AAAA,MAAOa,KAAP;AAAA,MAAcC,QAAd;;AAGAf,EAAAA,SAAS,CAAC,YAAM;AACdgB,IAAAA,OAAO,CAACC,GAAR,CAAY,CACVd,IAAI,CAACe,SAAL,+CACKd,QAAQ,CAACe,IADd,GAEKd,sBAAsB,CAACc,IAF5B;AAGEC,MAAAA,OAAO,EAAEC,OAAO;AAHlB,OADU,CAAZ,EAOGC,IAPH,CAOQ,YAAM;AACVP,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,KATH,EAUGQ,KAVH,CAUS,UAACC,KAAD,EAAW;AAGhBC,MAAAA,MAAM,CAACC,gBAAP,CAAwBF,KAAxB;AACD,KAdH;AAeD,GAhBQ,EAgBN,EAhBM,CAAT;AAkBA,MAAIG,IAAI,GAAG,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAX;;AAEA,MAAIb,KAAJ,EAAW;AACTa,IAAAA,IAAI,GACF,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAElB,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADN,CADF;AAKD;;AAED,SACE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGkB,IADH,CADF;AAKD,CA3CD;;AA6CA,eAAed,GAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { View } from \"react-native\";\r\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\r\nimport * as Font from \"expo-font\";\r\nimport { FormattedProvider } from \"react-native-globalize\";\r\nimport { includes } from \"ramda\";\r\nimport { Ionicons, MaterialCommunityIcons } from \"@expo/vector-icons\";\r\nimport { Provider } from \"react-redux\";\r\nimport { enableScreens } from \"react-native-screens\";\r\n\r\nimport { LocalizationContext } from \"utils\";\r\n\r\nimport AppNavigator from \"./app/navigation/Navigator/AppNavigator\";\r\nimport store from \"./app/redux/store\";\r\n\r\nconst supportedLanguages: string[] = [\r\n  \"en\",\r\n  \"fr\",\r\n  \"de\",\r\n  \"sv\",\r\n  \"da\",\r\n  \"ru\",\r\n  \"pt\",\r\n  \"pl\",\r\n  \"zh\",\r\n  \"my\",\r\n  \"es\",\r\n];\r\nconst defaultLanguage = \"en\";\r\nconst defaultLocale = \"en-us\";\r\n\r\nconst App: React.FC = () => {\r\n  enableScreens();\r\n\r\n  \r\n\r\n\r\n\r\n  const [ready, setReady] = useState(false);\r\n\r\n\r\n  useEffect(() => {\r\n    Promise.all([\r\n      Font.loadAsync({\r\n        ...Ionicons.font,\r\n        ...MaterialCommunityIcons.font,\r\n        Poppins: require(\"./assets/fonts/Poppins-Regular.ttf\"),\r\n      }),\r\n    ])\r\n      .then(() => {\r\n        setReady(true);\r\n      })\r\n      .catch((error) => {\r\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n        // @ts-ignore\r\n        Sentry.captureException(error);\r\n      });\r\n  }, []);\r\n\r\n  let body = <View />;\r\n\r\n  if (ready) {\r\n    body = (\r\n      <Provider store={store}>\r\n            <AppNavigator />\r\n      </Provider>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <SafeAreaProvider>\r\n      {body}\r\n    </SafeAreaProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}