{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nvar initialState = [];\nvar emissions = createSlice({\n  name: \"emissions\",\n  initialState: initialState,\n  reducers: {\n    createEmission: function createEmission(state, action) {\n      state.push(action.payload);\n    },\n    deleteEmission: function deleteEmission(state, action) {\n      return state = state.filter(function (item) {\n        return item.id !== action.payload;\n      });\n    },\n    toggleIsMitigated: function toggleIsMitigated(state, action) {\n      return state = state.map(function (item) {\n        return item.id === action.payload ? _objectSpread(_objectSpread({}, item), {}, {\n          isMitigated: !item.isMitigated\n        }) : item;\n      });\n    },\n    deleteAllEmissions: function deleteAllEmissions() {\n      return initialState;\n    },\n    loadEmissionsFromImport: function loadEmissionsFromImport(state, action) {\n      return state = action.payload;\n    }\n  }\n});\nvar _emissions$actions = emissions.actions,\n    createEmission = _emissions$actions.createEmission,\n    deleteEmission = _emissions$actions.deleteEmission,\n    toggleIsMitigated = _emissions$actions.toggleIsMitigated,\n    deleteAllEmissions = _emissions$actions.deleteAllEmissions,\n    loadEmissionsFromImport = _emissions$actions.loadEmissionsFromImport;\nexport var actions = {\n  createEmission: createEmission,\n  deleteEmission: deleteEmission,\n  toggleIsMitigated: toggleIsMitigated,\n  deleteAllEmissions: deleteAllEmissions,\n  loadEmissionsFromImport: loadEmissionsFromImport\n};\nexport var namespace = emissions.name;\nexport var reducer = emissions.reducer;","map":{"version":3,"sources":["E:/Work/Web/ReactNative/Test/app/ducks/emissions/emissions.slice.ts"],"names":["createSlice","initialState","emissions","name","reducers","createEmission","state","action","push","payload","deleteEmission","filter","item","id","toggleIsMitigated","map","isMitigated","deleteAllEmissions","loadEmissionsFromImport","actions","namespace","reducer"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAIA,IAAMC,YAAwB,GAAG,EAAjC;AAEA,IAAMC,SAAS,GAAGF,WAAW,CAAC;AAC5BG,EAAAA,IAAI,EAAE,WADsB;AAE5BF,EAAAA,YAAY,EAAZA,YAF4B;AAG5BG,EAAAA,QAAQ,EAAE;AACRC,IAAAA,cADQ,0BACOC,KADP,EACcC,MADd,EAC+C;AACrDD,MAAAA,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;AACD,KAHO;AAIRC,IAAAA,cAJQ,0BAIOJ,KAJP,EAIcC,MAJd,EAI6C;AACnD,aAAQD,KAAK,GAAGA,KAAK,CAACK,MAAN,CAAa,UAACC,IAAD;AAAA,eAAUA,IAAI,CAACC,EAAL,KAAYN,MAAM,CAACE,OAA7B;AAAA,OAAb,CAAhB;AACD,KANO;AAORK,IAAAA,iBAPQ,6BAOUR,KAPV,EAOiBC,MAPjB,EAOgD;AACtD,aAAQD,KAAK,GAAGA,KAAK,CAACS,GAAN,CAAU,UAACH,IAAD;AAAA,eACxBA,IAAI,CAACC,EAAL,KAAYN,MAAM,CAACE,OAAnB,mCAAkCG,IAAlC;AAAwCI,UAAAA,WAAW,EAAE,CAACJ,IAAI,CAACI;AAA3D,aAA2EJ,IADnD;AAAA,OAAV,CAAhB;AAGD,KAXO;AAYRK,IAAAA,kBAZQ,gCAYa;AACnB,aAAOhB,YAAP;AACD,KAdO;AAeRiB,IAAAA,uBAfQ,mCAegBZ,KAfhB,EAeuBC,MAfvB,EAe+D;AACrE,aAAQD,KAAK,GAAGC,MAAM,CAACE,OAAvB;AACD;AAjBO;AAHkB,CAAD,CAA7B;AAwBA,yBAMIP,SAAS,CAACiB,OANd;AAAA,IACEd,cADF,sBACEA,cADF;AAAA,IAEEK,cAFF,sBAEEA,cAFF;AAAA,IAGEI,iBAHF,sBAGEA,iBAHF;AAAA,IAIEG,kBAJF,sBAIEA,kBAJF;AAAA,IAKEC,uBALF,sBAKEA,uBALF;AAQA,OAAO,IAAMC,OAAO,GAAG;AACrBd,EAAAA,cAAc,EAAdA,cADqB;AAErBK,EAAAA,cAAc,EAAdA,cAFqB;AAGrBI,EAAAA,iBAAiB,EAAjBA,iBAHqB;AAIrBG,EAAAA,kBAAkB,EAAlBA,kBAJqB;AAKrBC,EAAAA,uBAAuB,EAAvBA;AALqB,CAAhB;AAQP,OAAO,IAAME,SAAS,GAAGlB,SAAS,CAACC,IAA5B;AAEP,OAAO,IAAMkB,OAAO,GAAGnB,SAAS,CAACmB,OAA1B","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nimport { Emission } from \"interfaces\";\r\n\r\nconst initialState: Emission[] = [];\r\n\r\nconst emissions = createSlice({\r\n  name: \"emissions\",\r\n  initialState,\r\n  reducers: {\r\n    createEmission(state, action: PayloadAction<Emission>) {\r\n      state.push(action.payload);\r\n    },\r\n    deleteEmission(state, action: PayloadAction<string>) {\r\n      return (state = state.filter((item) => item.id !== action.payload));\r\n    },\r\n    toggleIsMitigated(state, action: PayloadAction<string>) {\r\n      return (state = state.map((item) =>\r\n        item.id === action.payload ? { ...item, isMitigated: !item.isMitigated } : item\r\n      ));\r\n    },\r\n    deleteAllEmissions() {\r\n      return initialState;\r\n    },\r\n    loadEmissionsFromImport(state, action: PayloadAction<Array<Emission>>) {\r\n      return (state = action.payload);\r\n    },\r\n  },\r\n});\r\n\r\nconst {\r\n  createEmission,\r\n  deleteEmission,\r\n  toggleIsMitigated,\r\n  deleteAllEmissions,\r\n  loadEmissionsFromImport,\r\n} = emissions.actions;\r\n\r\nexport const actions = {\r\n  createEmission,\r\n  deleteEmission,\r\n  toggleIsMitigated,\r\n  deleteAllEmissions,\r\n  loadEmissionsFromImport,\r\n};\r\n\r\nexport const namespace = emissions.name;\r\n\r\nexport const reducer = emissions.reducer;\r\n"]},"metadata":{},"sourceType":"module"}