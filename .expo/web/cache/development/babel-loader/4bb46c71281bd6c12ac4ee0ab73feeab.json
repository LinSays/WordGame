{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { isEmpty, prop, reduce, maxBy, either, isNil, pipe } from \"ramda\";\nimport { transport, TransportType, food, getInternetUsageCarbonImpact, ElectricityType, electricity, purchase, fashion, streaming, meal } from \"carbon-footprint\";\nimport { EmissionType, Emission } from \"../../interfaces\";\nvar isNilOrEmpty = either(isNil, isEmpty);\n\nvar getFlightType = function getFlightType(duration) {\n  if (duration < 180) {\n    return TransportType.shortHaulFlight;\n  }\n\n  if (duration < 360) {\n    return TransportType.mediumHaulFlight;\n  }\n\n  return TransportType.longHaulFlight;\n};\n\nvar getFlightEmissionValue = function getFlightEmissionValue(duration) {\n  switch (getFlightType(duration)) {\n    case TransportType.shortHaulFlight:\n      {\n        var averageSpeedShortHaulSpeed = (588 * 1000 / (60 + 15) + 1543 * 1000 / (2 * 60 + 35)) / 2;\n        return averageSpeedShortHaulSpeed * duration;\n      }\n\n    case TransportType.mediumHaulFlight:\n      {\n        var averageMediumHaulSpeed = (2255 * 1000 / (3 * 60 + 25) + 4205 * 1000 / (5 * 60 + 45)) / 2;\n        return averageMediumHaulSpeed * duration;\n      }\n\n    case TransportType.longHaulFlight:\n      {\n        var averageLongHaulSpeed = (5837 * 1000 / (8 * 60 + 15) + 11648 * 1000 / (14 * 60 + 30)) / 2;\n        return averageLongHaulSpeed * duration;\n      }\n\n    default:\n      return 0;\n  }\n};\n\nvar getC02ValueFromEmission = function getC02ValueFromEmission(emission) {\n  if (emission.emissionType === EmissionType.custom) {\n    return emission.value;\n  }\n\n  if (emission.emissionType === EmissionType.electricity) {\n    return emission.value * electricity[emission.emissionModelType];\n  }\n\n  if (emission.emissionType === EmissionType.streaming) {\n    return getInternetUsageCarbonImpact(emission.value, streaming[emission.emissionModelType] * emission.value, emission.location || ElectricityType.world);\n  }\n\n  var model = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, transport), food), purchase), fashion), meal);\n\n  return emission.value * model[emission.emissionModelType];\n};\n\nvar getCreationDate = prop(\"creationDate\");\n\nvar getLatestEmission = function getLatestEmission(emissions) {\n  return isNilOrEmpty(emissions) ? null : reduce(maxBy(getCreationDate), emissions[0], emissions);\n};\n\nvar toKWH = function toKWH(x) {\n  return x * 3.6 / Math.pow(10, -6);\n};\n\nvar toKgCO2 = function toKgCO2(x) {\n  return x * 1000;\n};\n\nvar getCarbonIntensityInGramPerKWHromKgPerJoules = pipe(toKWH, toKgCO2, Math.round);\nexport default {\n  getLatestEmission: getLatestEmission,\n  getC02ValueFromEmission: getC02ValueFromEmission,\n  getFlightType: getFlightType,\n  getFlightEmissionValue: getFlightEmissionValue,\n  getCarbonIntensityInGramPerKWHromKgPerJoules: getCarbonIntensityInGramPerKWHromKgPerJoules\n};","map":{"version":3,"sources":["E:/Work/Web/ReactNative/Test/app/utils/calculation/calculation.ts"],"names":["isEmpty","prop","reduce","maxBy","either","isNil","pipe","transport","TransportType","food","getInternetUsageCarbonImpact","ElectricityType","electricity","purchase","fashion","streaming","meal","EmissionType","Emission","isNilOrEmpty","getFlightType","duration","shortHaulFlight","mediumHaulFlight","longHaulFlight","getFlightEmissionValue","averageSpeedShortHaulSpeed","averageMediumHaulSpeed","averageLongHaulSpeed","getC02ValueFromEmission","emission","emissionType","custom","value","emissionModelType","location","world","model","getCreationDate","getLatestEmission","emissions","toKWH","x","Math","pow","toKgCO2","getCarbonIntensityInGramPerKWHromKgPerJoules","round"],"mappings":"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","sourcesContent":["import { isEmpty, prop, reduce, maxBy, either, isNil, pipe } from \"ramda\";\r\nimport {\r\n  transport,\r\n  TransportType,\r\n  food,\r\n  getInternetUsageCarbonImpact,\r\n  ElectricityType,\r\n  electricity,\r\n  purchase,\r\n  fashion,\r\n  streaming,\r\n  meal,\r\n} from \"carbon-footprint\";\r\n\r\nimport { EmissionType, Emission } from \"interfaces\";\r\n\r\nconst isNilOrEmpty = either(isNil, isEmpty);\r\n\r\nconst getFlightType = (duration: number): TransportType => {\r\n  /* Below 3 hours */\r\n  if (duration < 180) {\r\n    return TransportType.shortHaulFlight;\r\n  }\r\n\r\n  /* Between 3 and 6 hours */\r\n  if (duration < 360) {\r\n    return TransportType.mediumHaulFlight;\r\n  }\r\n\r\n  /* Above 6 hours */\r\n  return TransportType.longHaulFlight;\r\n};\r\n\r\nconst getFlightEmissionValue = (duration: number): number => {\r\n  switch (getFlightType(duration)) {\r\n    case TransportType.shortHaulFlight: {\r\n      /* Paris -> Toulouse 1h15 AF6122 588 km */\r\n      /* Paris -> Stockholm 2h35 AF1462 1543 km */\r\n      const averageSpeedShortHaulSpeed =\r\n        ((588 * 1000) / (60 + 15) + (1543 * 1000) / (2 * 60 + 35)) / 2;\r\n      return averageSpeedShortHaulSpeed * duration;\r\n    }\r\n    case TransportType.mediumHaulFlight: {\r\n      /* Paris -> Istanbul 3h25 AF1390 2255 km */\r\n      /* Paris -> Dakar 5h45 AF718 4205 km */\r\n      const averageMediumHaulSpeed =\r\n        ((2255 * 1000) / (3 * 60 + 25) + (4205 * 1000) / (5 * 60 + 45)) / 2;\r\n      return averageMediumHaulSpeed * duration;\r\n    }\r\n    case TransportType.longHaulFlight: {\r\n      /* Paris -> New York 8h15 AF22 5837 km */\r\n      /* Paris -> Santiago 14h30 AF406 11648 km */\r\n      const averageLongHaulSpeed =\r\n        ((5837 * 1000) / (8 * 60 + 15) + (11648 * 1000) / (14 * 60 + 30)) / 2;\r\n      return averageLongHaulSpeed * duration;\r\n    }\r\n    default:\r\n      return 0;\r\n  }\r\n};\r\n\r\nconst getC02ValueFromEmission = (emission: Emission): number => {\r\n  if (emission.emissionType === EmissionType.custom) {\r\n    return emission.value;\r\n  }\r\n\r\n  if (emission.emissionType === EmissionType.electricity) {\r\n    return emission.value * electricity[emission.emissionModelType];\r\n  }\r\n\r\n  if (emission.emissionType === EmissionType.streaming) {\r\n    return getInternetUsageCarbonImpact(\r\n      emission.value,\r\n      streaming[emission.emissionModelType] * emission.value,\r\n      emission.location || ElectricityType.world\r\n    );\r\n  }\r\n\r\n  const model = {\r\n    ...transport,\r\n    ...food,\r\n    ...purchase,\r\n    ...fashion,\r\n    ...meal,\r\n  };\r\n  return emission.value * model[emission.emissionModelType];\r\n};\r\n\r\nconst getCreationDate: (Emission) => string = prop(\"creationDate\");\r\n\r\nconst getLatestEmission = (emissions: Array<Emission>): Emission =>\r\n  isNilOrEmpty(emissions) ? null : reduce(maxBy(getCreationDate), emissions[0], emissions);\r\n\r\nconst toKWH = (x: number): number => (x * 3.6) / Math.pow(10, -6);\r\nconst toKgCO2 = (x: number): number => x * 1000;\r\nconst getCarbonIntensityInGramPerKWHromKgPerJoules = pipe(toKWH, toKgCO2, Math.round);\r\n\r\nexport default {\r\n  getLatestEmission,\r\n  getC02ValueFromEmission,\r\n  getFlightType,\r\n  getFlightEmissionValue,\r\n  getCarbonIntensityInGramPerKWHromKgPerJoules,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}